{
    "Create header": {
        "prefix": "createHeader",
        "body": [
            "#ifndef $1XXX_H",
            "#define XXX_H\n",
            "#include <>",
            "#include \"\"\n",
            "class Yyy;\n",
            "class Xxx : public Zzz, public Www",
            "{",
            "  public:",
            "    Xxx( );",
            "    ~Xxx( );",
            "  protected:",
            "  private:",
            "    int asil;",
            "    std::string barkin;",
            "};\n",
            "#endif //_XXX_H_"
        ],
        "description": "Create boilerplate header file"
    },
    "Create Object": {
        "prefix": "createCPP",
        "body": [
            "#include \"Xxx.h\"",
            "#include <stdio.h>\n",
            "#define APPNAME \"Xxx\"\n",
            "const std::string abc = \"abc\";\n",
            "Xxx::Xxx( Zzz* zzz, Www* www ) :",
            "    asil( zzz ),",
            "    barkin( www )",
            "{",
            "}\n",
            "Xxx::~Xxx( )",
            "{",
            "}"
        ],
        "description": "Create boilerplate cpp file"
    },
    "std::list Iterator": {
        "prefix": "listiter",
        "body": [
            "std::list<int> $1;",
            "$1.push_back( $2 );\n",
            "std::list<int>::const_iterator listIter;",
            "for (listIter = $1.begin(); listIter != $1.end(); ++listIter) ",
            "{",
            "    printf(\"%d\\n\", *listIter);",
            "}"
        ],
        "description": "List iterator"
    },
    "std::vector Iterator": {
        "prefix": "vectoriter",
        "body": [
            "std::vector<std::string> $1;",
            "$1.push_back(\"a\");\n",
            "std::vector<std::string>::iterator vectorIter;",
            "for(vectorIter=$1.begin() ; vectorIter < $1.end(); vectorIter++ )",
            "{",
            "    std::string currentElement = *vectorIter;",
            "}"
        ],
        "description": "Vector iterator"
    },
    "std::map Iterator": {
        "prefix": "mapiter",
        "body": [
            "std::map<std::string, std::string> $1;",
            "$1.insert( std::pair<std::string, std::string>(\"asil\",\"elik\") );\n",
            "std::map<std::string, std::string>::iterator mapIterator;",
            "for(mapIterator = $1.begin(); mapIterator != $1.end(); mapIterator++)",
            "{",
            "    std::string key = mapIterator->first;",
            "    std::string value = mapIterator->second;",
            "}"
        ],
        "description": "Map iterator"
    },
    "Print to console": {
        "prefix": "print",
        "body": [
            "printf(\"$1\\n\");"
        ],
        "description": "Simple printf"
    },
    "Quick string": {
        "prefix": "str",
        "body": [
            "std::string $1;"
        ],
        "description": "Simple string"
    }
}